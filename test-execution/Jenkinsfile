def agentLabel = ""
pipeline{
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    parameters {
        string(name: 'testsToRun',description: '' )
        string(name: 'runnerJarPath', defaultValue: 'C:\\dev\\shift\\silk-central-shift\\execution-wrapper\\target\\octane-shift-execution-wrapper-4.21-SNAPSHOT.jar', description: "")
        string(name: 'nunit2',defaultValue: '\"D:\\from C\\myFolder\\nunit\\NUnit-2.7.1\\bin\\nunit-console.exe\"',description: '' )
        string(name: 'nunit3',defaultValue: '\"D:\\from C\\myFolder\\netcoreapp3.1\\Nunit\\nunit3-console.exe\"' )
        string(name: 'suiteId',description: '' )
        string(name: 'suiteRunId',description: '' )
    }
    environment {
            AUTH_TOKEN = credentials('AndreiGithubCredentials')
    }
    stages {

        stage('setTag') {
            
            steps {
                dir('test-execution') {
                    bat 'npm install'
                    bat 'npm run build'
                    script {
                          bat(script: "call npm run start-pe %suiteId%", returnStdout: true).trim()
                    }
                    bat "echo ${agentLabel}"
                }
                
            }
        }

        stage('Run Tests') {
            agent{
                label agentLabel
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'AndreiSVN', usernameVariable: 'github_user', passwordVariable: 'github_password')]) {
                        dir('test-execution') {
                            bat 'npm install'
                            bat 'npm run build'
                            bat 'call npm run start-nunit "%testsToRun%" "%runnerJarPath%" %suiteId% %suiteRunId% %nunit2% %nunit3% %github_user% %github_password%'
                            try {
                                bat 'call command_to_execute.bat'
                            } catch(err) {
                                bat 'echo Tests failed! Continue...'
                            }
                            bat 'call java_command_to_execute.bat'
                        }
                        
                    }
                }
                archiveArtifacts artifacts: 'test-execution/java_command_to_execute.bat,test-execution/command_to_execute.bat,test-execution/testResults/*.xml', onlyIfSuccessful: false
                junit allowEmptyResults: true, testResults: 'test-execution/testResults/*.xml'
                
            }

        }

    }
    post {
                always {
                    cleanWs()
                }
                aborted {
                    cleanWs()
                    bat 'echo abort'
                }
            }

}
